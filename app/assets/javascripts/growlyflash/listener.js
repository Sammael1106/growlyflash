// Generated by CoffeeScript 2.4.1
(function() {
  var Listener,
    indexOf = [].indexOf;

  Listener = (function() {
    var Stack, process, process_from_header;

    class Listener {
      constructor(context) {
        if (this.stack == null) {
          this.stack = new Stack();
        }
        this.process_static(context);
        ($(context)).on(Growlyflash.Listener.EVENTS, (event, xhr) => {
          var ref, source;
          if (xhr != null ? xhr : xhr = (ref = event.data) != null ? ref.xhr : void 0) {
            source = process_from_header(xhr.getResponseHeader(Growlyflash.Listener.HEADER));
            this.stack.push_only_fresh(source);
          }
        });
      }

      process_static(context) {
        var alert, i, j, len, len1, ref, ref1, results, tag, tag_flashes;
        if (tag = context.getElementById('growlyflash-tag')) {
          tag_flashes = JSON.parse(tag.getAttribute('data-flashes'));
          ref = process(tag_flashes);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            alert = ref[i];
            results.push(this.stack.push(alert));
          }
          return results;
        } else if (window.flashes != null) {
          ref1 = process(window.flashes);
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            alert = ref1[j];
            this.stack.push(alert);
          }
          return delete window.flashes;
        }
      }

    };

    // Alerts stack
    Stack = class Stack {
      constructor(...items) {
        this.items = items;
      }

      purge() {
        return setTimeout((() => {
          return this.items.splice(0);
        }), 100);
      }

      push(alert, dumped) {
        if (dumped == null) {
          dumped = alert.toString();
        }
        if (Growlyflash.debug) {
          console.log("Add to Growlyflash stack: ", dumped);
        }
        Growlyflash.growl(alert);
        return this.items.push(dumped);
      }

      push_only_fresh(alerts) {
        var alert, dumped, i, len, recent;
        recent = this.items.slice(-alerts.length);
        for (i = 0, len = alerts.length; i < len; i++) {
          alert = alerts[i];
          dumped = alert.toString();
          if (indexOf.call(recent, dumped) < 0) {
            this.push(alert, dumped);
          }
        }
        return this.purge();
      }

    };

    Listener.HEADER = 'X-Message';

    Listener.EVENTS = 'ajax:complete ajaxComplete';

    process = function(alerts = {}) {
      var msg, results, type;
      results = [];
      for (type in alerts) {
        msg = alerts[type];
        if (msg != null) {
          results.push(new Growlyflash.FlashStruct(msg, type));
        }
      }
      return results;
    };

    process_from_header = function(source) {
      if (source == null) {
        return [];
      }
      return process($.parseJSON(decodeURIComponent(source)));
    };

    return Listener;

  }).call(this);

  this.Growlyflash.Listener = Listener;

  this.Growlyflash.listen_on = function(context) {
    return this.listener != null ? this.listener : this.listener = new this.Listener(context);
  };

}).call(this);
