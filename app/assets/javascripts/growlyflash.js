// Generated by CoffeeScript 2.4.1
(function() {
  // ./growlyflash/alert

  this.Growlyflash = (function() {
    var _titleize, h;

    class Growlyflash {
      static growl(flash, options = {}) {
        var alert;
        options = $.extend(true, {}, Growlyflash.defaults, {
          type: flash.type
        }, options);
        alert = new Growlyflash.Alert(flash, options);
        if (flash instanceof Growlyflash.FlashStruct) {
          return flash;
        } else {
          return alert;
        }
      }

      static build_shorthands() {
        var name, ref, type;
        ref = this.KEY_MAPPING;
        for (type in ref) {
          name = ref[type];
          if (Growlyflash[type] == null) {
            Growlyflash[type] = function(msg) {
              return Growlyflash.growl(new Growlyflash.FlashStruct(msg, type));
            };
          }
          if (name !== type) {
            if (Growlyflash[name] == null) {
              Growlyflash[name] = Growlyflash[type];
            }
          }
        }
      }

    };

    Growlyflash.debug = false;

    Growlyflash.defaults = {
      align: 'right', // horizontal aligning (left, right or center)
      delay: 4000, // auto-dismiss timeout (false to disable auto-dismiss)
      dismiss: true, // allow to show close button
      spacing: 10, // spacing between alerts
      target: 'body', // selector to target element where to place alerts
      title: false, // switch for adding a title
      type: null, // bootstrap alert class by default
      class: ['alert', 'growlyflash', 'fade'],
      // customizable callback to set notification position before it shows
      before_show: function() {
        return this.el.css(this.calc_css_position());
      }
    };

    Growlyflash.KEY_MAPPING = {
      alert: 'warning',
      error: 'danger',
      notice: 'info',
      success: 'success'
    };

    Growlyflash.DISMISS = "<button type=\"close\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>";

    _titleize = function(s) {
      return s.replace(/^./, function(m) {
        return m.toUpperCase();
      });
    };

    h = Growlyflash.helpers = {
      dismiss: function() {
        return Growlyflash.DISMISS;
      },
      title: function(s) {
        return `<strong>${_titleize(s)}!</strong> `;
      }
    };

    // Flash message struct
    Growlyflash.FlashStruct = class FlashStruct {
      toString() {
        return JSON.stringify({
          [`${this.msg}`]: this.key
        });
      }

      constructor(msg1, key) {
        this.msg = msg1;
        this.key = key;
        this.type = Growlyflash.KEY_MAPPING[this.key];
      }

    };

    Growlyflash.Alert = (function() {
      var _add, _top;

      class Alert {
        constructor(flash1, opts) {
          var before_show, delay, dismiss, html, target, title;
          this.show = this.show.bind(this);
          this.close = this.close.bind(this);
          this.flash = flash1;
          this.opts = opts;
          ({title, target, dismiss, delay, before_show} = this.opts);
          html = "";
          if (dismiss) {
            html += h.dismiss();
          }
          if (title && (this.opts.type != null)) {
            html += h.title(this.opts.type);
          }
          html += this.flash.msg;
          this.el = $('<div>', {
            html: html,
            class: this.class_list().join(' '),
            role: "alert"
          });
          this.el = this.el.appendTo($(target));
          if (before_show != null) {
            before_show.call(this);
          }
          if (Growlyflash.debug) {
            console.debug(this.flash);
          }
          this.show();
          if (delay) {
            setTimeout(this.close, this.opts.delay);
          }
        }

        class_list() {
          var add, list;
          list = [].concat(this.opts.class);
          add = _add.bind(list);
          if (this.opts.dismiss) {
            add('alert', "dismissable");
          }
          if (this.opts.type != null) {
            add('alert', this.opts.type);
          }
          if (this.opts.align != null) {
            add('growlyflash', this.opts.align);
          }
          return list;
        }

        show() {
          return Growlyflash.el.toggleClass('in', true);
        }

        close() {
          return Growlyflash.el.fadeOut(() => {
            return Growlyflash.el.remove();
          });
        }

        calc_top_offset({spacing}) {
          var amount;
          amount = _top(this.el);
          (this.el.siblings('.growlyflash')).each(function() {
            return amount = Math.max(amount, _top(this) + ($(this)).outerHeight() + spacing);
          });
          return amount;
        }

        calc_css_position(css = {}) {
          css.top = `${this.calc_top_offset(this.opts)}px`;
          if (this.opts.align === 'center') {
            css.marginLeft = `-${this.el.outerWidth() / 2}px`;
          }
          return css;
        }

      };

      _add = function(orig, add) {
        return this.splice(-(~this.indexOf(orig)), 0, `${orig}-${add}`);
      };

      _top = function(e) {
        return parseInt(($(e)).css('top'));
      };

      return Alert;

    }).call(this);

    return Growlyflash;

  }).call(this);

  jQuery.growlyflash = Growlyflash.growl;


  // ./growlyflash/listener
  var Listener,
    indexOf = [].indexOf;

  Listener = (function() {
    var Stack, process, process_from_header;

    class Listener {
      constructor(context) {
        if (this.stack == null) {
          this.stack = new Stack();
        }
        this.process_static(context);
        ($(context)).on(Growlyflash.Listener.EVENTS, (event, xhr) => {
          var ref, source;
          if (xhr != null ? xhr : xhr = (ref = event.data) != null ? ref.xhr : void 0) {
            source = process_from_header(xhr.getResponseHeader(Growlyflash.Listener.HEADER));
            this.stack.push_only_fresh(source);
          }
        });
      }

      process_static(context) {
        var alert, i, j, len, len1, ref, ref1, results, tag, tag_flashes;
        if (tag = context.getElementById('growlyflash-tag')) {
          tag_flashes = JSON.parse(tag.getAttribute('data-flashes'));
          ref = process(tag_flashes);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            alert = ref[i];
            results.push(this.stack.push(alert));
          }
          return results;
        } else if (window.flashes != null) {
          ref1 = process(window.flashes);
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            alert = ref1[j];
            this.stack.push(alert);
          }
          return delete window.flashes;
        }
      }

    };

    // Alerts stack
    Stack = class Stack {
      constructor(...items) {
        this.items = items;
      }

      purge() {
        return setTimeout((() => {
          return this.items.splice(0);
        }), 100);
      }

      push(alert, dumped) {
        if (dumped == null) {
          dumped = alert.toString();
        }
        if (Growlyflash.debug) {
          console.log("Add to Growlyflash stack: ", dumped);
        }
        Growlyflash.growl(alert);
        return this.items.push(dumped);
      }

      push_only_fresh(alerts) {
        var alert, dumped, i, len, recent;
        recent = this.items.slice(-alerts.length);
        for (i = 0, len = alerts.length; i < len; i++) {
          alert = alerts[i];
          dumped = alert.toString();
          if (indexOf.call(recent, dumped) < 0) {
            this.push(alert, dumped);
          }
        }
        return this.purge();
      }

    };

    Listener.HEADER = 'X-Message';

    Listener.EVENTS = 'ajax:complete ajaxComplete';

    process = function(alerts = {}) {
      var msg, results, type;
      results = [];
      for (type in alerts) {
        msg = alerts[type];
        if (msg != null) {
          results.push(new Growlyflash.FlashStruct(msg, type));
        }
      }
      return results;
    };

    process_from_header = function(source) {
      if (source == null) {
        return [];
      }
      return process($.parseJSON(decodeURIComponent(source)));
    };

    return Listener;

  }).call(this);

  this.Growlyflash.Listener = Listener;

  this.Growlyflash.listen_on = function(context) {
    return this.listener != null ? this.listener : this.listener = new this.Listener(context);
  };

  jQuery(function() {
    Growlyflash.build_shorthands();
    return Growlyflash.listen_on(this);
  });

}).call(this);
